import { Button, Grid, Paper, TextField } from "@mui/material";
import { Inter } from "@next/font/google";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import { updateGlobalEnv } from "../api/nanoContext";
import { EnvModal, envModalStore, openEnvModal } from "../components/EnvModal";
import { globalStore } from "../stores/global";
import { App } from "../types/NanoTypes";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" flex-1 flex flex-col p-4 ">
        <Paper className="w-4/5 mx-auto h-20 mb-12 flex justify-between px-4">
          <div className="flex items-center">
            <Link href="/management">
              <Button variant="contained" className="text-yellow-500">
                Management page
              </Button>
            </Link>
          </div>
          <div className="flex items-center">
            <Button
              variant="contained"
              className="text-yellow-500 h-min"
              onClick={() => {
                openEnvModal({
                  title: "Global environment",
                  value: globalStore.getState().nanoConfig.globalEnvironment,
                  onCancel: () => {
                    toast("Global environment was not changed");
                  },
                  onSave: async () => {
                    await updateGlobalEnv(envModalStore.getState().value);
                    toast("Global environment successfully saved");
                  },
                });
              }}
            >
              Global environment
            </Button>
          </div>
          <div className="flex gap-2 items-center py-6 ">
            <TextField type="text" label="App name" size="small" />
            <Button variant="contained" className="text-yellow-500">
              Add
            </Button>
          </div>
        </Paper>
        <div className="w-4/5 mx-auto">
          <AppsGrid />
        </div>
      </main>
      <EnvModal />
    </>
  );
}

const AppsGrid = () => {
  const apps = globalStore((state) => state.apps);
  return (
    <Grid container spacing={2}>
      {apps.map((app) => {
        return (
          <Grid xs={3} item key={app.ID}>
            <SignleAppPreview app={app} />
          </Grid>
        );
      })}
    </Grid>
  );
};

type SignleAppPreviewProps = {
  app: App;
};

const SignleAppPreview = ({ app }: SignleAppPreviewProps) => {
  const [currentlyBuilding, setCurrentlyBuilding] = useState(false);
  const buildingAppId = globalStore((state) => state.buildingAppId);

  useEffect(() => {
    if (buildingAppId === app.ID) {
      setCurrentlyBuilding(true);
    } else {
      setCurrentlyBuilding(false);
    }
  }, [buildingAppId]);

  return (
    <Paper className="p-4 h-[230px] flex flex-col">
      <h1 className="text-xl">{app.appName}</h1>

      <div className="flex flex-col flex-1 my-4">
        <div className="font-bold">
          Status:{" "}
          {currentlyBuilding && (
            <span className="text-green-500">Building</span>
          )}
          {!currentlyBuilding && <span className="text-yellow-500">Idle</span>}
        </div>

        <div className="flex flex-col gap-1 mt-4">
          <div>
            Last build status: <span className="text-green-500">TODO</span>
          </div>
          <div>
            Last built at: <span className="">TODO</span>
          </div>
        </div>
      </div>

      <div className="w-full flex justify-end">
        <Link href={"/app?appId=" + app.ID}>
          <Button>Details</Button>
        </Link>
      </div>
    </Paper>
  );
};
